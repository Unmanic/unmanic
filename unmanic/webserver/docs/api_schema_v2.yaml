components:
  schemas:
    BadEndpoint:
      properties:
        error:
          description: Return status code and reason
          example: '404: Endpoint not found'
          type: string
      required:
      - error
      type: object
    BadMethod:
      properties:
        error:
          description: Return status code and reason
          example: '405: Method ''GET'' not allowed'
          type: string
      required:
      - error
      type: object
    BadRequest:
      properties:
        error:
          description: Return status code and reason
          example: '400: Failed request schema validation'
          type: string
        messages:
          description: Attached request body validation errors
          example: &id001
            name:
            - The thing that went wrong.
          type: object
        traceback:
          description: Attached exception traceback (if developer mode is enabled)
          example: &id002
          - 'Traceback (most recent call last):

            '
          - '...'
          - 'json.decoder.JSONDecodeError: Expecting value: line 3 column 14 (char
            45)

            '
          items:
            type: string
          type: array
      required:
      - error
      - messages
      type: object
    BaseSuccess:
      properties:
        success:
          description: This is always "True" when a request succeeds
          example: true
          type: boolean
      required:
      - success
      type: object
    CompletedTasks:
      properties:
        recordsTotal:
          description: Total number of records in this table
          example: 329
          type: integer
        recordsFiltered:
          default: 10
          description: Total number of records after filters have been applied
          example: 10
          type: integer
        results:
          description: Results
          items:
            $ref: '#/components/schemas/CompletedTasksTableResults'
          minItems: 1
          type: array
        successCount:
          description: Total count of times with a success status in the results list
          example: 337
          type: integer
        failedCount:
          description: Total count of times with a failed status in the results list
          example: 2
          type: integer
      required:
      - failedCount
      - results
      - successCount
      type: object
    CompletedTasksTableResults:
      properties:
        id:
          description: Item ID
          example: 1
          type: integer
        task_label:
          description: Item label
          example: example.mp4
          type: string
        task_success:
          description: Item success status
          example: true
          type: boolean
        finish_time:
          description: Item finish time
          example: 1627392616.6400812
          type: integer
      required:
      - finish_time
      - id
      - task_label
      - task_success
      type: object
    DocumentContentSuccess:
      properties:
        content:
          description: Document contents read line-by-line into a list
          example:
          - 'First line

            '
          - 'Second line

            '
          - '

            '
          items:
            type: string
          minItems: 1
          type: array
      required:
      - content
      type: object
    InternalError:
      properties:
        error:
          description: Return status code and reason
          example: '500: Caught exception message'
          type: string
        messages:
          description: Attached request body validation errors
          example: *id001
          type: object
        traceback:
          description: Attached exception traceback (if developer mode is enabled)
          example: *id002
          items:
            type: string
          type: array
      required:
      - error
      - messages
      type: object
    PendingTasks:
      properties:
        recordsTotal:
          description: Total number of records in this table
          example: 329
          type: integer
        recordsFiltered:
          default: 10
          description: Total number of records after filters have been applied
          example: 10
          type: integer
        results:
          description: Results
          items:
            $ref: '#/components/schemas/PendingTasksTableResults'
          minItems: 0
          type: array
      required:
      - results
      type: object
    PendingTasksTableResults:
      properties:
        id:
          description: Item ID
          example: 1
          type: integer
        abspath:
          description: File absolute path
          example: example.mp4
          type: string
        priority:
          description: The current priority (higher is greater)
          example: 100
          type: integer
      required:
      - abspath
      - id
      - priority
      type: object
    PluginStatus:
      properties:
        installed:
          description: Is the plugin installed
          example: true
          type: boolean
        enabled:
          description: Is the plugin enabled
          example: true
          type: boolean
        update_available:
          description: Does the plugin have an update available
          example: true
          type: boolean
      type: object
    PluginsConfigInputItem:
      properties:
        key_id:
          description: The config input base64 encoded key (used for linking keys
            containing spaces, etc.)
          example: c8f122656ed2acabde9b57101a4c8ec7
          type: string
        key:
          description: The config input key or name
          example: downmix_dts_hd_ma
          type: string
        value:
          description: The current value of this config input
          example: false
        input_type:
          description: The config input type
          example: checkbox
          type: string
        label:
          description: The label used to define this config input
          example: Downmix DTS-HD Master Audio (max 5.1 channels)?
          type: string
        select_options:
          description: Additional options if the input_type is set to 'select'
          example:
          - label: First Option
            value: first
          - label: Second Option
            value: second
          items:
            type: object
          type: array
        slider_options:
          description: Additional options if the input_type is set to 'slider'
          example:
            max: 8
            min: 1
            suffix: M
          type: object
        display:
          description: Should the setting input be displayed (visible, hidden)
          example: visible
          type: string
      required:
      - display
      - input_type
      - key
      - key_id
      - label
      - select_options
      - slider_options
      - value
      type: object
    PluginsData:
      properties:
        recordsTotal:
          description: Total number of records in this table
          example: 329
          type: integer
        recordsFiltered:
          default: 10
          description: Total number of records after filters have been applied
          example: 10
          type: integer
        results:
          description: Results
          items:
            $ref: '#/components/schemas/PluginsTableResults'
          minItems: 0
          type: array
      required:
      - results
      type: object
    PluginsInfoResults:
      properties:
        plugin_id:
          description: The plugin ID
          example: encoder_video_h264_nvenc
          type: string
        name:
          description: The plugin name
          example: Video Encoder H264 - h264_nvenc
          type: string
        author:
          description: The plugin author
          example: encoder_video_h264_nvenc
          type: string
        description:
          description: The plugin description
          example: Ensure all video streams are encoded with the H264 codec using
            the h264_nvenc encoder.
          type: string
        version:
          description: The plugin version
          example: Josh.5
          type: string
        icon:
          description: The plugin icon
          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/master/source/encoder_video_h264_nvenc/icon.png
          type: string
        tags:
          description: The plugin tags
          example: video,encoder,ffmpeg,worker,nvenc,nvdec,nvidia
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/PluginStatus'
          description: The plugin status
        changelog:
          description: The plugin changelog
          example: "[b][color=56adda]0.0.1[/color][/b]\u2022 initial version"
          type: string
        settings:
          description: The plugin settings
          items:
            $ref: '#/components/schemas/PluginsConfigInputItem'
          type: array
      required:
      - author
      - description
      - icon
      - name
      - plugin_id
      - status
      - tags
      - version
      type: object
    PluginsInstallableResults:
      properties:
        plugins:
          description: Results
          items:
            $ref: '#/components/schemas/PluginsMetadataInstallableResults'
          minItems: 0
          type: array
      required:
      - plugins
      type: object
    PluginsMetadataInstallableResults:
      properties:
        plugin_id:
          description: The plugin ID
          example: encoder_video_h264_nvenc
          type: string
        name:
          description: The plugin name
          example: Video Encoder H264 - h264_nvenc
          type: string
        author:
          description: The plugin author
          example: encoder_video_h264_nvenc
          type: string
        description:
          description: The plugin description
          example: Ensure all video streams are encoded with the H264 codec using
            the h264_nvenc encoder.
          type: string
        version:
          description: The plugin version
          example: Josh.5
          type: string
        icon:
          description: The plugin icon
          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/master/source/encoder_video_h264_nvenc/icon.png
          type: string
        tags:
          description: The plugin tags
          example: video,encoder,ffmpeg,worker,nvenc,nvdec,nvidia
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/PluginStatus'
          description: The plugin status
        changelog:
          description: The plugin changelog
          example: "[b][color=56adda]0.0.1[/color][/b]\u2022 initial version"
          type: string
        package_url:
          description: The plugin package download URL
          example: https://raw.githubusercontent.com/Unmanic/unmanic-plugins/repo/encoder_video_h264_nvenc/encoder_video_h264_nvenc-1.0.0.zip
          type: string
        changelog_url:
          description: The plugin package download URL
          example: https://raw.githubusercontent.com/Unmanic/unmanic-plugins/repo/encoder_video_h264_nvenc/encoder_video_h264_nvenc-1.0.0.zip
          type: string
      required:
      - author
      - description
      - icon
      - name
      - plugin_id
      - status
      - tags
      - version
      type: object
    PluginsTableResults:
      properties:
        plugin_id:
          description: The plugin ID
          example: encoder_video_h264_nvenc
          type: string
        name:
          description: The plugin name
          example: Video Encoder H264 - h264_nvenc
          type: string
        author:
          description: The plugin author
          example: encoder_video_h264_nvenc
          type: string
        description:
          description: The plugin description
          example: Ensure all video streams are encoded with the H264 codec using
            the h264_nvenc encoder.
          type: string
        version:
          description: The plugin version
          example: Josh.5
          type: string
        icon:
          description: The plugin icon
          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/master/source/encoder_video_h264_nvenc/icon.png
          type: string
        tags:
          description: The plugin tags
          example: video,encoder,ffmpeg,worker,nvenc,nvdec,nvidia
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/PluginStatus'
          description: The plugin status
        changelog:
          description: The plugin changelog
          example: "[b][color=56adda]0.0.1[/color][/b]\u2022 initial version"
          type: string
        id:
          description: Item table ID
          example: 1
          type: integer
      required:
      - author
      - description
      - icon
      - id
      - name
      - plugin_id
      - status
      - tags
      - version
      type: object
    RequestHistoryTableData:
      properties:
        start:
          default: 0
          description: Start row number to select from
          example: 0
          type: integer
        length:
          default: 10
          description: Number of rows to select
          example: 10
          type: integer
        search_value:
          default: ''
          description: String to filter search results by
          example: items with this text in the value
          type: string
        order_by:
          default: finish_time
          example: finish_time
          type: string
        order_direction:
          description: Order direction ('asc' or 'desc')
          enum:
          - asc
          - desc
          example: desc
          type: string
      type: object
    RequestPendingTableData:
      properties:
        start:
          default: 0
          description: Start row number to select from
          example: 0
          type: integer
        length:
          default: 10
          description: Number of rows to select
          example: 10
          type: integer
        search_value:
          default: ''
          description: String to filter search results by
          example: items with this text in the value
          type: string
        order_by:
          default: priority
          example: priority
          type: string
        order_direction:
          description: Order direction ('asc' or 'desc')
          enum:
          - asc
          - desc
          example: desc
          type: string
      type: object
    RequestPendingTasksReorder:
      properties:
        id_list:
          description: Start row number to select from
          example: 0
          items:
            type: integer
          minItems: 1
          type: array
        position:
          description: Position to move given list of items to ('top' or 'bottom')
          enum:
          - top
          - bottom
          example: top
          type: string
      required:
      - id_list
      - position
      type: object
    RequestPluginsById:
      properties:
        plugin_id:
          example: dts_to_dd
          type: string
      required:
      - plugin_id
      type: object
    RequestPluginsInfo:
      properties:
        plugin_id:
          example: dts_to_dd
          type: string
        prefer_local:
          default: true
          example: true
          type: boolean
      required:
      - plugin_id
      type: object
    RequestPluginsSettingsSave:
      properties:
        plugin_id:
          example: dts_to_dd
          type: string
        settings:
          description: The plugin settings
          items:
            $ref: '#/components/schemas/PluginsConfigInputItem'
          type: array
      required:
      - plugin_id
      - settings
      type: object
    RequestPluginsTableData:
      properties:
        start:
          default: 0
          description: Start row number to select from
          example: 0
          type: integer
        length:
          default: 10
          description: Number of rows to select
          example: 10
          type: integer
        search_value:
          default: ''
          description: String to filter search results by
          example: items with this text in the value
          type: string
        order_by:
          default: name
          example: name
          type: string
        order_direction:
          description: Order direction ('asc' or 'desc')
          enum:
          - asc
          - desc
          example: desc
          type: string
      type: object
    RequestTableUpdateByIdList:
      properties:
        id_list:
          description: Start row number to select from
          example: 0
          items:
            type: integer
          minItems: 1
          type: array
      required:
      - id_list
      type: object
    SessionStateSuccess:
      properties:
        level:
          description: User level
          example: 0
          type: integer
        picture_uri:
          description: User picture
          example: https://c8.patreon.com/2/200/561356054
          type: string
        name:
          description: User name
          example: ExampleUsername123
          type: string
        email:
          description: User email
          example: example@gmail.com
          type: string
        created:
          description: Session time created
          example: 1627793093.676484
          type: number
        uuid:
          description: Installation uuid
          example: b429fcc7-9ce1-bcb3-2b8a-b094747f226e
          type: string
      required:
      - level
      - uuid
      type: object
    VersionReadSuccess:
      properties:
        version:
          description: Application version
          example: 1.0.0
          type: string
      required:
      - version
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
info:
  description: Documentation for the Unmanic application API
  title: Unmanic API
  version: '2'
openapi: 3.0.0
paths:
  /docs/privacypolicy:
    get:
      description: Returns the privacy policy.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentContentSuccess'
          description: 'Sample response: Returns the privacy policy.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /history/tasks:
    post:
      description: Returns a list of completed tasks.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestHistoryTableData'
        description: Returns a list of completed tasks.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletedTasks'
          description: 'Sample response: Returns a list of completed tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
    delete:
      description: Delete a list of completed tasks.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTableUpdateByIdList'
        description: Requested list of items to delete.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Deleted a list of completed tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /history/reprocess:
    post:
      description: Add a list of completed tasks back to the Pending Tasks queue.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTableUpdateByIdList'
        description: Requested list of items to reprocess.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Requested list of items to reprocess.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /pending/tasks:
    post:
      description: Returns a list of pending tasks.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPendingTableData'
        description: Returns a list of pending tasks.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingTasks'
          description: 'Sample response: Returns a list of pending tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
    delete:
      description: Delete a list of pending tasks.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTableUpdateByIdList'
        description: Requested list of items to delete.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Deleted a list of pending tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /pending/reorder:
    post:
      description: Reorder a list of pending tasks.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPendingTasksReorder'
        description: Requested list of items to reorder.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Reorder a list of pending tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/installed:
    post:
      description: Returns a list of installed plugins.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPluginsTableData'
        description: Requested a list of installed plugins.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginsData'
          description: 'Sample response: Returns a list of installed plugins.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/enable:
    post:
      description: Enable a list of plugins.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTableUpdateByIdList'
        description: Requested list of plugins to enable.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Deleted a list of completed tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/disable:
    post:
      description: Disable a list of plugins.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTableUpdateByIdList'
        description: Requested list of plugins to disable.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Deleted a list of completed tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/update:
    post:
      description: Update a list of plugins.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTableUpdateByIdList'
        description: Requested list of plugins to update.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Deleted a list of completed tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/remove:
    delete:
      description: Remove a list of plugins.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTableUpdateByIdList'
        description: Requested list of plugins to remove.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Deleted a list of completed tasks.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/info:
    post:
      description: Returns a the metadata and settings of a requested plugin.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPluginsInfo'
        description: Requested a single plugin to install.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginsInfoResults'
          description: 'Sample response: Returns a the metadata and settings of a
            requested plugin.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/settings/update:
    post:
      description: Saves the settings of a single plugin.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPluginsSettingsSave'
        description: Returns a list of installed plugins.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Sample response: Saves the settings of a single plugin.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/installable:
    get:
      description: Returns a list of installable plugins.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginsInstallableResults'
          description: 'Sample response: Returns a list of installable plugins.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /plugins/install:
    put:
      description: Installs a plugin by its plugin ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPluginsById'
        description: Returns a list of installed plugins.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Sample response: Installs a plugin by its plugin ID.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /session/state:
    get:
      description: Returns the application session state.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionStateSuccess'
          description: 'Sample response: Returns the application session state.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /session/reload:
    put:
      description: Reload the current session.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseSuccess'
          description: 'Success: Reloaded the current session.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
  /version/read:
    get:
      description: Returns the application version.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionReadSuccess'
          description: 'Sample response: Returns the application version.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Bad request; Check `messages` for any validation errors
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadEndpoint'
          description: Bad request; Requested endpoint not found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadMethod'
          description: Bad request; Requested method is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
          description: Internal error; Check `error` for exception
security:
- BasicAuth: []
servers:
- description: Local environment
  url: http://localhost:8888/api/v2/
